---
title: "Chpt. 9 - Layers"
author: "Austin Mangelson"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

### Aesthetic Mapping

```{r}
mpg

ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point()
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy, size = class)) +
  geom_point()

ggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +
  geom_point()
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(color = "blue")

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(shape = 8)
```

### Exercises

1.  Create a scatterplot of `hwy` vs. `displ` where the points are pink filled in triangles.

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(shape = "triangle", color = "pink") +
  theme_bw()

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(shape = 17, color = "pink") +
  theme_bw()
```

2.  Why did the following code not result in a plot with blue points?

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, color = "blue"))
```

Because the color argument is inside the aesthetics mapping. To create a plot with blue points, it must be outside.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy), color = "blue")
```

3.  What does the `stroke` aesthetic do? What shapes does it work with? (Hint: use [`?geom_point`](https://ggplot2.tidyverse.org/reference/geom_point.html))

Stroke increases the size of the shape. It works with all shapes.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, stroke = 2), shape = 0, color = "blue")
```

4.  What happens if you map an aesthetic to something other than a variable name, like `aes(color = displ < 5)`? Note, you’ll also need to specify x and y.

This creates aesthetics that map the conditions given.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, color = displ < 5))

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, size = hwy < 25))
```

### Geometric Objects

All geom() functions take a mapping argument, but not every aesthetic works with every geom (ex. shaping points vs lines, line types, etc.)

```{r}
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) +
  geom_smooth()

ggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) +
  geom_smooth()
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth()

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(group = drv))

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(color = drv), show.legend = FALSE)
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_point(
    data = mpg |> filter(class == "2seater"),
    color = "red"
  ) +
  geom_point(
    data = mpg |> filter(class == "2seater"),
    shape = "circle open", size = 3, color = "red"
  )
```

### Exercises

1.  What geom would you use to draw a line chart? A boxplot? A histogram? An area chart?

geom_line(), geom_boxplot(), geom_histogram(), geom_area() respectively

2.  Earlier in this chapter we used `show.legend` without explaining it:

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(color = drv))

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(aes(color = drv), show.legend = FALSE)
```

What does `show.legend = FALSE` do here? What happens if you remove it? Why do you think we used it earlier?

It either shows or removes the legend.

3.  What does the `se` argument to [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) do?

It removes the or displays the confidence interval of the line.

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth(se = FALSE)
```

4.  Recreate the R code necessary to generate the following graphs. Note that wherever a categorical variable is used in the plot, it’s `drv`.

```{r}

#1
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(color = "blue", se = FALSE)

#2
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth(aes(group = drv), color = "blue", se = FALSE)

#3
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_smooth(aes(color = drv), se = FALSE)

#4
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_smooth(color = "blue", se = FALSE)

#5
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_smooth(aes(linetype = drv), color = "blue", se = FALSE)

#6
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_point(
    shape = "circle open", size = 3, stroke = 1.5, color = "white")
```

### Facets

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  facet_wrap(~cyl)
```

facet_grid() allows you to facet on 2 variables

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  facet_grid(drv ~ cyl)
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  facet_grid(drv ~ cyl, scales = "free")
```

### Exercises

1.  What happens if you facet on a continuous variable?

You get an error.

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  facet_wrap(~wt)
```

2.  What do the empty cells in the plot above with `facet_grid(drv ~ cyl)` mean? Run the following code. How do they relate to the resulting plot?

It means there's no data that fits both of the categorical criteria. The missing points in the second plot correspond to the missing plots in the faceted grid.

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  facet_grid(drv ~ cyl, scales = "free")

ggplot(mpg) + 
  geom_point(aes(x = drv, y = cyl))
```

3.  What plots does the following code make? What does `.` do?

The . indicates whether the faceting should be done in columns or rows.

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(. ~ cyl)

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(~cyl)
```

4.  Take the first faceted plot in this section. What are the advantages to using faceting instead of the color aesthetic? What are the disadvantages? How might the balance change if you had a larger dataset?

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) + 
  facet_wrap(~ cyl, nrow = 2)

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy, color = cyl))
```

Faceting is useful in larger data sets in order to more easily visualize distributions. It's also more useful to view small numbers of categorical numeric values.

5.  Read [`?facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html). What does `nrow` do? What does `ncol` do? What other options control the layout of the individual panels? Why doesn’t [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) have `nrow` and `ncol` arguments?

```{r}
?facet_wrap
```

6.  Which of the following plots makes it easier to compare engine size (`displ`) across cars with different drive trains? What does this say about when to place a faceting variable across rows or columns?

The rows make it significantly easier.

```{r}
ggplot(mpg, aes(x = displ)) + 
  geom_histogram() + 
  facet_grid(drv ~ .)

ggplot(mpg, aes(x = displ)) + 
  geom_histogram() +
  facet_grid(. ~ drv)
```

7.  Recreate the following plot using [`facet_wrap()`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) instead of [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html). How do the positions of the facet labels change?

```{r}
ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_grid(drv ~ .)

ggplot(mpg) + 
  geom_point(aes(x = displ, y = hwy)) +
  facet_wrap(~ drv, ncol = 1)
```

### **Statistical Transformations**
