---
title: "Chpt. 27 - Base R"
author: "Austin Mangelson"
format: html
editor: visual
---

```{r}
library(tidyverse)
```

Subsetting vectors:

```{r}

#vector of positive integers
x <- c("one", "two", "three", "four", "five")
x[c(3, 2, 5)]

#vector of negative integers
x[c(-1, -3, -5)]

#logical vector
x <- c(10, 3, NA, 5, 8, 1, NA)
x[!is.na(x)]
x[x %% 2 == 0]

#character vector
x <- c(abc = 1, def = 2, xyz = 5)
x[c("xyz", "def")]
```

Subsetting data frames:

```{r}
df <- tibble(
  x = 1:3, 
  y = c("a", "e", "f"), 
  z = runif(3)
)

#first row and second column
df[1, 2]

#all rows, columns x and y
df[, c("x", "y")]

#rows where x is greater than 1 and all columns
df[df$x > 1, ]
```

```{r}
#Base R combines filter() and select()
df <- tibble(
  x = c(2, 3, 1, 1, NA), 
  y = letters[1:5], 
  z = runif(5)
)

df |> 
  filter(x > 1) |> 
  select(y, z)

#same as
df |> subset(x > 1, c(y, z))
```

```{r}
# [ selects many elements, pairs with [[ and $, which extract single elements

tb <- tibble(
  x = 1:4,
  y = c(10, 4, 1, 21)
)

#extracts column number 1
tb[[1]]

#extracts columns by name
tb[["x"]]
tb$x

#create new columns
tb$z <- tb$x + tb$y
```

```{r}
max(diamonds$carat)

levels(diamonds$cut)
```

## Apply Family

```{r}
df <- tibble(a = 1, b = 2, c = "a", d = "b", e = 4)

# First find numeric columns
num_cols <- sapply(df, is.numeric)
num_cols


# Then transform each column with lapply() then replace the original values
df[, num_cols] <- lapply(df[, num_cols, drop = FALSE], \(x) x * 2)
df
```
